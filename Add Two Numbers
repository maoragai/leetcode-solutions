problem: Add Two Numbers
Level: Medium
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.


Submission results:
Success
Runtime: 32 ms, faster than 38.88% of C++ online submissions for Add Two Numbers.
Memory Usage: 9.3 MB, less than 100.00% of C++ online submissions for Add Two Numbers.
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* currentnode;
        ListNode* sol;
        int  num1=0,num2=0,value=0;        
      
        sol=new ListNode(0);
        currentnode=sol;
        
        while(l1!=NULL||l2!=NULL){
            // assign the values into vars
            if(l1!=NULL)num1=l1->val; else num1=0;
            if(l2!=NULL)num2=l2->val; else num2=0;            
            //add the number
            value=num1+num2+currentnode->val;     
            currentnode->val=value%10;
            //if theres continueity create a new currentnode node
            if(l1!=NULL&&l1->next!=NULL ||l2!=NULL&& l2->next!=NULL||value>=10)
                currentnode->next=new ListNode(value/10);            
            if(l1!=NULL)l1=l1->next;
            if(l2!=NULL) l2=l2->next;
            if(currentnode->next!=NULL)currentnode=currentnode->next;            
        }
        return sol;
    }
};
