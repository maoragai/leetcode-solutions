problem: 
Level: Medium

Example:Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 

Submission results:
Success
Runtime: 32 ms, faster than 43.07% of C++ online submissions for Longest Substring Without Repeating Characters.
Memory Usage: 10 MB, less than 73.13% of C++ online submissions for Longest Substring Without Repeating Characters.

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        std::unordered_map<char,int> lettermap;
        char c;        
        std::deque<char> deq;
        int maxsize=0;
        int i=0;
        int slength=s.size();
        while(i<slength){
            c=s[i];        
            //check if the letter already apeared
            //if it did,pop the queue to its apearence and erase every letter from the map to this letter
            if (lettermap.count(c)!=0){
                while(deq.front()!=c){
                    auto it= lettermap.erase(deq.front());
                    deq.pop_front();
                }
                deq.pop_front();
                deq.push_back(c);
            }
            //if it did not apear, push_back to the queue and
            //increase maxlength by 1, insert the letter to the map <letter,1>
            else if( lettermap.count(c)==0){
                deq.push_back(c);
                lettermap[c]=1;
                if(deq.size()>maxsize)maxsize=deq.size();
            }            
            //i increament
            i++;
        }
        return maxsize;
    }
};
